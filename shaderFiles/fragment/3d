#version 400

out vec4 FragColor;
in vec2 coords; // fragment in question
uniform sampler2D tex; // texture
uniform float t; // time component
uniform int STEPS; // The number of adjacent locations in one direction to use for smearing
uniform float user_x;//mouse x
uniform float user_y;//mouse y
uniform int bool_lic;//lic or not lic

uniform float angle_x;
uniform float angle_y;
uniform mat3 rotMat;

float PI = 3.1415;
//the signature
subroutine vec2 selector(vec2 pos);

//subroutine uniform
subroutine uniform selector selection;

subroutine (selector) vec2 f9(vec2 pos){

	vec4 tmp;
	//magnitudes
	float mag1 = -10, mag2 = +10;
	//positions
	vec3 pos1 = vec3(-0.5, 0, 0), pos2 = vec3(0.5, 0, 0), pt = vec3(pos.x, pos.y, 0);

	pos1 = rotMat*pos1;
	pos2 = rotMat*pos2;

	// distance vectors
	vec3 dis1 = pos1-pt, dis2 = pos2-pt;
	//denominators
	float d1 = length(dis1) + 1, d2 = length(dis2) + 1;

	vec3 v1 = mag1 / (d1 * d1 * d1) * dis1;
	vec3 v2 = mag2 / (d2 * d2 * d2) * dis2;

	vec3 diff = v1 + v2;

	return vec2(diff.x, diff.y);
}

// vec2 att2(vec2 pos){

// 	vec4 tmp;
// 	//magnitudes
// 	float mag1 = -10, mag2 = +10;
// 	//positions
// 	vec3 pos1 = vec3(-0.5, 0, 0), pos2 = vec3(0.5, 0, 0), pt = vec3(pos.x, pos.y, 0);

// 	//org normal
// 	vec3 oNormal = vec3((0, 0, 1));
// 	//transform the positions of charges
// 	float dotR = dot(normalize(oNormal), normalize(nNormal));

// 	// if(dotR != 1){
// 		vec3 rotationAxis = normalize(cross(oNormal, nNormal));
// 		float rotationAngle = acos(dotR);

// 		tmp = rotationMatrix(rotationAxis, rotationAngle)*vec4(pos1, 0);
// 		pos1 = tmp.xyz;
// 		tmp = rotationMatrix(rotationAxis, rotationAngle)*vec4(pos2, 0);
// 		pos2 = tmp.xyz;
// 	// }


// 	// distance vectors
// 	vec3 dis1 = pos1-pt, dis2 = pos2-pt;
// 	//denominators
// 	float d1 = length(dis1) + 1, d2 = length(dis2) + 1;

// 	vec3 v1 = mag1 / (d1 * d1 * d1) * dis1;
// 	vec3 v2 = mag2 / (d2 * d2 * d2) * dis2;

// 	vec3 diff = v1 + v2;

// 	return vec2(diff.x, diff.y);
// }

// //returns attractive vector
// vec2 att1(vec2 pos) {
  
//   //transform x and y according to angle_x and angle_y
// 	vec3 pt = vec3(pos.x, pos.y, 0);
	
// 	vec3 direction = normalize(vec3(cos(angle_y*PI/180.0f)*sin(angle_x*PI/180.0f), 
// 									sin(angle_y*PI/180.0f), 
// 									cos(angle_y*PI/180.0f)*cos(angle_x*PI/180.0f)));

// 	// //1.finding augmented coordinates
// 	// //create a new basis matrix
// 	// vec3 new_x, new_y, new_z;
// 	// mat3 transform = mat3(vec3(1, 0, 0), vec3(0, 1, 0), vec3(0, 0, 1));
// 	// if(direction.x == 0 && direction.y == 0){

// 	// 	if(direction.z < 0)
// 	// 		new_z = vec3(-x, y, 0);
// 	// 	//else no change
// 	// }
// 	// else{
// 	// 	vec3 new_z = direction;
// 	// 	vec3 new_x = normalize(cross(new_z, vec3(0, 0, 1)));
// 	// 	vec3 new_y = cross(new_z, new_x);

// 	// 	transform = mat3(new_x, new_y, new_z);
// 	// 	pt = transform * pt;
// 	// }

// 	//2.finding augmented coordinates
// 	vec4 tpt = rotationMatrix(vec3(0, 1, 0), angle_x*PI/180.0f)*vec4(pt, 0);
// 	tpt = rotationMatrix(vec3(1, 0, 0), angle_y*PI/180.0f)*tpt;
// 	pt = tpt.xyz;
//   //start 2d LIC
//   float charge1 = 10, charge2 = 10;
//   vec3 rq1 = vec3(0.5, 0, 0), rq2 = vec3(-0.5, 0, 0);
//   //distance vectors
//   vec3 v1 = rq1-pt,
//       v2 = rq2-pt;
//   //denominators
//   float d1 = length(v1) + 1,
//       d2 = length(v2) + 1;

//   // //enable to show poles as circular objects
//   // if (d1 < 1.1 || d2 < 1.1) {
//   //   return vec2(0, 0);
//   // }

//   v1 = charge1 / (d1 * d1 * d1) * v1;
//   v2 = charge2 / (d2 * d2 * d2) * v2;
  
//   vec3 diff = normalize(v1 - v2);
//   //in plane vector
//   vec3 ret = normalize(cross(normalize(cross(direction, diff)), direction));
  
//   // ret = inverse(transform) * ret;
//   vec4 tret = rotationMatrix(vec3(1, 0, 0), -angle_y*PI/180.0f)*vec4(ret, 0);
//   tret = rotationMatrix(vec3(0, 1, 0), -angle_x*PI/180.0f)*tret;
//   return normalize(tret.xy);
// };

// function to use for the x and y portions of the vector field
subroutine (selector) vec2 f(vec2 pos) {
				
	int s = (int(t/3) % 6) + 1;
	float x = pos.x;
	float y = pos.y;
	if(s == 1) {
		return vec2(0.5*sin(5.0*x*x*cos(t) + 5.0*y), 0.4*cos(5.0*x*x*sin(t) + 5.0*y));
	} else if(s == 2) {
		return vec2(0.4*sin(x + 10.0*sin(t)*y) + y, 0.4*sin(x + 10.0*sin(t)*y) - x*sqrt(abs(x)));
	} else if(s == 3) {
		return vec2(sin(10.0*x*sin(t) + y), cos(2.0*x*sin(t) + 11.0*y*cos(t)));
	} else if(s == 4) {
		return vec2(0.5*sin(5.0*x*x*cos(t) + 5.0*y*sqrt(abs(y))) + y, 0.4*cos(5.0*x*x*sin(t) + 5.0*y*sqrt(abs(y))) - x);
	} else if(s == 5) {
		return vec2(sin(2.0*y + 3.0*x*sin(t)), cos(cos(t)*5.0*sqrt(abs(x))));
	}

	return vec2(y*cos(t), -x*sin(t));
}

// function that does not perform any transform
subroutine (selector) vec2 f0(vec2 pos) {
	return vec2(0.0, 0.0);
}

subroutine (selector) vec2 f1(vec2 pos) {
	return vec2(0.5*sin(5.0*pos.x*pos.x*cos(t) + 5.0*pos.y), 0.4*cos(5.0*pos.x*pos.x*sin(t) + 5.0*pos.y));
}

subroutine (selector) vec2 f2(vec2 pos) {
	return vec2(0.4*sin(pos.x + 10.0*sin(t)*pos.y) + pos.y, 0.4*sin(pos.x + 10.0*sin(t)*pos.y) - pos.x*sqrt(abs(pos.x)));
}

subroutine (selector) vec2 f3(vec2 pos) {
	return vec2(sin(10.0*pos.x*sin(t) + pos.y), cos(2.0*pos.x*sin(t) + 11.0*pos.y*cos(t)));
}

subroutine (selector) vec2 f4(vec2 pos) {
	return vec2(0.5*sin(5.0*pos.x*pos.x*cos(t) + 5.0*pos.y*sqrt(abs(pos.y))) + pos.y, 
		0.4*cos(5.0*pos.x*pos.x*sin(t) + 5.0*pos.y*sqrt(abs(pos.y))) - pos.x);
}

subroutine (selector) vec2 f5(vec2 pos) {
	return vec2(sin(2.0*pos.y + 3.0*pos.x*sin(t)), cos(cos(t)*5.0*sqrt(abs(pos.x))));
}

subroutine (selector) vec2 f6(vec2 pos) {
	return vec2(pos.y*cos(t), -pos.x*sin(t));
}

subroutine (selector) vec2 f7(vec2 pos) {
	return pos;
}

//following function returns normal against the fragment
subroutine (selector) vec2 f8(vec2 pos){

	vec3 col = texture2D(tex, pos).rgb;
	float luminance = dot(col, vec3(0.2126, 0.7152, 0.0722));
  	float vx = dFdx(luminance );
  	float vy = dFdy(luminance );
  	return vec2(vy, vx);

}

//returns repulsive vector
subroutine (selector) vec2 f10(vec2 pos){

	float mag1 = 10, mag2 = 10;
	vec3 pos1 = vec3(0.5, 0, 0), pos2 = vec3(-0.5, 0, 0), pt = vec3(pos.x, pos.y, 0);
	vec3 dis1 = pos1 - pt, dis2 = pos2 - pt;

	float d1 = length(dis1) + 1, d2 = length(dis2) + 1;

	// if (d1 < 1.01 || d2 < 1.2) {
	//   return [0, 0];
	// }

	vec3 v1 = mag1 / (d1 * d1 * d1) * dis1;
	vec3 v2 = mag2 / (d2 * d2 * d2) * dis2;
	
	vec3 diff = v1 + v2;
	return vec2(diff.x, diff.y);
}

vec3 GetColour(float v, float vmin, float vmax)
{
   vec3 c = vec3(1.0,1.0,1.0); // white
   float dv;

   if (v < vmin)
      v = vmin;
   if (v > vmax)
      v = vmax;
   dv = vmax - vmin;

   if (v < (vmin + 0.25 * dv)) {
      c.x = 0;
      c.y = 4 * (v - vmin) / dv;
   } else if (v < (vmin + 0.5 * dv)) {
      c.x = 0;
      c.z = 1 + 4 * (vmin + 0.25 * dv - v) / dv;
   } else if (v < (vmin + 0.75 * dv)) {
      c.x = 4 * (v - vmin - 0.5 * dv) / dv;
      c.z = 0;
   } else {
      c.y = 1 + 4 * (vmin + 0.75 * dv - v) / dv;
      c.z = 0;
   }

   return(c);
}

// perfrom line integral convolution
vec4 lic() {

	const float STEPSIZE = 0.001; // Stepsize to access adjacent texture sample
	vec2 init_coords = 2*(coords-vec2(0.5, 0.5)); // inital x,y coordinate, shift domain from (0,1) domain to (-1,1)
	
	vec2 curr_f = init_coords; //trace forward position
	vec2 curr_b = init_coords; //trace backward position
	vec4 texture_value; // color value at the particular texture coordinate vec4/RGBA
	vec2 v_f, v_b; //returned normalized vector
	vec4 texture_sum = vec4(0, 0, 0, 0);

	// step FORWARD & BACKWARD along the vector field
	for(int i=0; i<STEPS; i++) {

		v_f = normalize(selection(curr_f));
		v_b = normalize(selection(curr_b));
		// use Euler's Method. Get the next approximate point along the curve
		curr_f += STEPSIZE * v_f;
		curr_b -= STEPSIZE * v_b;

		// get the texture value at forward point
		texture_value = texture2D(tex, curr_f/2.0+vec2(0.5, 0.5)); // color value at the particular texture coordinate vec4/RGBA
		texture_sum += texture_value;	
		// get the texture value at backward point
		texture_value = texture2D(tex, curr_b/2.0+vec2(0.5, 0.5)); // color value at the particular texture coordinate vec4/RGBA
		texture_sum += texture_value;	
	}

	// average grayscale value of all samples along the curve, this is the final value for this pixel
	vec4 texture_normalized = texture_sum / float(STEPS * 2);

	//regular
	vec4 return_value = texture_normalized;

	// //else
	// v_f = selection(init_coords);
	// float max_mag = 3.5f;
	// float mag = length(v_f)/max_mag;
	// mag = (mag>1?1:mag);
	// float scale = texture_normalized.x;

	// vec3 t[4];
	// t[0] = vec3(100,100,100);//grey
	// t[1] = vec3(150,0,0);//crimson
	// t[2] = vec3(255,0,0);//red
	// t[3] = vec3(0,0,255);//blue

	// int i = int(mag*4);
 //    vec3 color = (t[i]*(1-mag*4+i)+t[i+1]*(mag*4-i))*scale;
 //    return_value = vec4(color.x, color.y, color.z, 1);

	return return_value;
}

//interactive
vec4 lic2(float x, float y){
	
	const float STEPSIZE = 0.001; // Stepsize to access adjacent texture sample
	vec2 init_coords = 2*(coords-vec2(x, y)); // inital x,y coordinate, shift domain from (0,1) domain to (-1,1)
	
	vec2 curr_f = init_coords; //trace forward position
	vec2 curr_b = init_coords; //trace backward position
	vec4 texture_value; // color value at the particular texture coordinate vec4/RGBA
	vec2 v_f, v_b; //returned normalized vector
	vec4 texture_sum = vec4(0, 0, 0, 0);

	// step FORWARD & BACKWARD along the vector field
	for(int i=0; i<STEPS; i++) {

		v_f = normalize(selection(curr_f));
		v_b = normalize(selection(curr_b));
		// use Euler's Method. Get the next approximate point along the curve
		curr_f += STEPSIZE * v_f;
		curr_b -= STEPSIZE * v_b;

		// get the texture value at forward point
		texture_value = texture2D(tex, curr_f/2.0+vec2(0.5, 0.5)); // color value at the particular texture coordinate vec4/RGBA
		texture_sum += texture_value;	
		// get the texture value at backward point
		texture_value = texture2D(tex, curr_b/2.0+vec2(0.5, 0.5)); // color value at the particular texture coordinate vec4/RGBA
		texture_sum += texture_value;	
	}

	// average grayscale value of all samples along the curve, this is the final value for this pixel
	vec4 texture_normalized = texture_sum / float(STEPS * 2);

	//if noise background
	vec4 return_value = texture_normalized;

	return return_value;
}

void main() {
	
	//1.interactive
	// if(bool_lic)
	// 	FragColor = lic2(user_x, 1.0-user_y);//texture2D(tex, coords);   // run lic; note the return value is of type vec4/RGBA
	// else
	// 	FragColor = texture2D(tex, coords);	
	
	//2. non-interactive lic

	FragColor = lic();

	// //3.just to show that glFragCoord maps to the varying data coming from vertex shader
	// float nx = glFragCoord.x/800;
	// float ny = glFragCoord.y/800;
	// gl_FragColor = texture2D(tex, vec2(nx, ny));   // run lic; note the return value is of type vec4/RGBA
}
